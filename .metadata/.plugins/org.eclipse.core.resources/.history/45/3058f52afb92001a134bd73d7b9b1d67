package com.order.Orderms.service;

import java.security.Key;
import java.util.Date;

import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;



@Service
@Component
public class Jwtservice {

   
	@Value("${Orderms.app.secretkey}")
    private static String SECRET_KEY;
    
    @Value("${Authms.app.jwtSecret}")
	private String jwtSecret;

    //Sample method to construct a JWT
    public static String createJWT(String id, String issuer, String subject, long ttlMillis) {

        //The JWT signature algorithm we will be using to sign the token
        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;

        long nowMillis = System.currentTimeMillis();
        Date now = new Date(nowMillis);

        //We will sign our JWT with our ApiKey secret
   //     byte[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(SECRET_KEY);
   //     Key signingKey = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());

        //Let's set the JWT Claims
        JwtBuilder builder = Jwts.builder().setId(id)
                .setIssuedAt(now)
                .setSubject(subject)
                .setIssuer(issuer)
                .signWith(signatureAlgorithm, SECRET_KEY);

        //if it has been specified, let's add the expiration
        if (ttlMillis >= 0) {
            long expMillis = nowMillis + ttlMillis;
            Date exp = new Date(expMillis);
            builder.setExpiration(exp);
        }

        //Builds the JWT and serializes it to a compact, URL-safe string
        return builder.compact();
    }

    public static Claims decodeJWT(String jwt) {

        //This line will throw an exception if it is not a signed JWS (as expected)
        Claims claims = Jwts.parser()
                .setSigningKey(DatatypeConverter.parseBase64Binary(SECRET_KEY))
                .parseClaimsJws(jwt).getBody();
        return claims;
    }
    
    public  String decodeAuthmsJWT(String tokenVal) {

        //This line will throw an exception if it is not a signed JWS (as expected)
		/*
		 * Claims claims = Jwts.parser()
		 * .setSigningKey(DatatypeConverter.parseBase64Binary(jwtSecret))
		 * .parseClaimsJws(jwt).getBody(); return claims;
		 */
		/*
		 * DecodedJWT jwtval = JWT.decode(jwt); return jwtval.getAlgorithm();
	     */
		  try { 
		  Jws<Claims> claimVal = Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(tokenVal); 
		  return claimVal.getBody().getSubject(); 
		  } catch (Exception e) { 
			  return "Failed"; 
		  }
		 

    }


}
